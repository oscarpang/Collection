/*********************************************************************
 File:     chromakey.cpp

 Author:   Your name here

 Email address:

 Usage: program_name in.bmp background.bmp dist_threshold out1.bmp out2.bmp

 Notes:
 This program performs the chroma key operation on an input 
 using two different methods.

 Method 1 Utilize a user-defined distance threshold from the
          chromakey value as a discriminator

 Method 2 Devise a method that to determine the chromakey mask
          that doesn't require a user-input threshold

********************************************************************/

#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <cmath>
#include "bmplib.h"

using namespace std;

// Prototypes
// IMPORTANT: you must exactly use these input types, function names, and 
// return types. Otherwise the grader can't test them.
void method1(unsigned char inImage[][SIZE][RGB], 
	     bool mask[][SIZE],
	     double threshold);

void method2(unsigned char inImage[][SIZE][RGB], 
	     bool mask[][SIZE]);

void replace(bool mask[][SIZE],
	     unsigned char inImage[][SIZE][RGB],
	     unsigned char bgImage[][SIZE][RGB],
	     unsigned char outImage[][SIZE][RGB]);

double distance(int chromaKey[],int pixel[]);
double* residentDif(int color[], unsigned char inImage[][SIZE][RGB]);
int main(int argc, char *argv[])
{
  // Image data array
  // Note:  DON'T use the static keyword except where we expressly say so.
  //        It puts the large array in a separate, fixed, area of memory. 
  //        It is bad practice. But useful until we have dynamic allocation.
	static unsigned char inputImage[SIZE][SIZE][RGB];
 	static unsigned char bgrndImage[SIZE][SIZE][RGB];
 	static unsigned char outputImage[SIZE][SIZE][RGB];
 	static bool chromaMask[SIZE][SIZE];

	double threshold;

	if (argc < 6) 
	{
		cerr << "usage: program_name in.bmp background.bmp dist_threshold " 
		<< "out1.bmp out2.bmp" << endl;
		return 0;
	}
	
	if (readRGBBMP(argv[1], inputImage)) 
	{
		cerr << "Error reading file: " << argv[1] << endl;
		return 1;
	}

	if (readRGBBMP(argv[2], bgrndImage)) 
	{
		cout << "Error reading file: " << argv[2] << endl;
		return 1;
	}
  
  // Write code to convert the threshold (argv[3])
  //  from string format to a double and assign the 'threshold'
	threshold = atof(argv[3]);

  // Call Method 1 Function
	method1(inputImage,chromaMask,threshold);

  // Produce the output by calling replace()
	replace(chromaMask,inputImage,bgrndImage,outputImage);

  // Write the output image to a file using the filename argv[4]
	if (writeRGBBMP(argv[4], outputImage)) 
	{
		cout << "Error writing file: " << argv[4] << endl;
		exit(1);
	}	

  // Call Method 2 Function
	method2(inputImage,chromaMask);

  // Produce the output by calling replace()
	replace(chromaMask,inputImage,bgrndImage,outputImage);

  // Write the output image to a file using the filename argv[5]
	if (writeRGBBMP(argv[5], outputImage)) 
	{
		cout << "Error writing file: " << argv[5] << endl;
		exit(1);
	}	

  return 0;
}



// Use user-provided threshold for chroma-key distance
// The "output" of this method is to produce a valid mask array
//  where entries in the mask array are 1 for foreground image
//  and 0 for 'background'
void method1(unsigned char inImage[][SIZE][RGB], 
	     bool mask[][SIZE],
	     double threshold)
{

	int chromaKey[3] = {0,0,0};
	int count = 0;


	for(int i = 0; i < SIZE/5; i++)
	{
		for(int j = 0; j < SIZE/5; j++)
		{
			for(int k = 0; k<RGB;k++)
			{
				chromaKey[k] += inImage[i][j][k];
			}
			count++;
		}
	}

	for(int i = 0; i < RGB; i++)
	{
		chromaKey[i] = chromaKey[i]/count;
	}

	for(int i = 0; i < SIZE; i++)
	{
		for(int j = 0; j < SIZE; j++)
		{
			int pixel[3];
			for(int k = 0; k < RGB; k++)
			{
				pixel[k]=inImage[i][j][k];			
			}
			if(distance(chromaKey,pixel)<threshold)
			{
				mask[i][j]=0;
			}
			else
			{
				mask[i][j]=1;
			}
		
		}
	}
}

// Devise a method to automatically come up with a threshold
//  for the chroma key determination
// The "output" of this method is to produce a valid mask array
//  where entries in the mask array are 1 for foreground image
//  and 0 for 'background'
void method2(unsigned char inImage[][SIZE][RGB], 
	     bool mask[][SIZE])  
{
	int color[3] = {0,0,0};
	int count = 0;

	for(int i = 0; i<SIZE/5;i++)
	{
		for(int j = 0; j<SIZE/5;j++)
		{
			for(int k=0;k<RGB;k++)
			{
				color[k]+=inImage[i][j][k];
			}
			count++;
		}
	}

	for(int i = 0; i < RGB; i++)
	{
		color[i] = color[i]/count;
		cout << color[i] << " ";
	}
	

	double* dif = residentDif(color,inImage);
	
	double R_up = color[0]+*dif;
	double R_down = color[0]-*dif;

	double G_up = color[1]+*(dif+1);
	double G_down = color[1]-*(dif+1);

	double B_up = color[2]+*(dif+2);
	double B_down = color[2]-*(dif+2);

	double threshold = sqrt(pow(*dif,2)+pow(*(dif+1),2)+pow(*(dif+2),2));
	
	method1(inImage, mask, threshold);

	cout << R_up << " " << R_down << " " << *dif<< endl;	
	cout << G_up << " " << G_down << " " << *(dif+1) << endl;
	cout << B_up << " " << B_down << " " << *(dif+2) << endl;
	cout << threshold << endl;
}

// If mask[i][j] = 1 use the input image pixel for the output image
// Else if mask[i][j] = 0 use the background image pixel
void replace(bool mask[SIZE][SIZE],
	     unsigned char inImage[SIZE][SIZE][RGB],
	     unsigned char bgImage[SIZE][SIZE][RGB],
	     unsigned char outImage[SIZE][SIZE][RGB])
{
  // Create the output image using the mask to determine
  //  whether to use the pixel from the Input or Background image
	for(int i = 0; i < SIZE ;i++)
	{
		for(int j = 0; j < SIZE; j++)
		{
			if(mask[i][j])
			{
				for(int k = 0; k < RGB; k++)
				{
					outImage[i][j][k] = inImage[i][j][k];
				}
			}
			else
			{
				for(int k = 0; k < RGB; k++)
				{
					outImage[i][j][k] = bgImage[i][j][k];
				}
			}
		}
	}


}

double distance(int chromaKey[],
	        int pixel[])
{
	int tolOfSquare = 0;
	for(int i = 0; i < 3; i++)
	{
		tolOfSquare += pow((chromaKey[i]-pixel[i]),2);
	}	

	return sqrt(((double)tolOfSquare));
}


double* residentDif(int color[],
		   unsigned char image[][SIZE][RGB])
{
	double sumSquare[3] = {0,0,0};
	for(int i = 0; i< SIZE; i++)
	{
		for(int j = 0; j< SIZE; j++)
		{
			for(int k = 0; k<RGB; k++)
			{
				sumSquare[k] += pow((color[k]-image[i][j][k]),2);
			}
		}
	}
	
	double result[3];
	result[0] = 1.1*sqrt(sumSquare[0]/(256*256));
	result[1] = 1.1*sqrt(sumSquare[1]/(256*256));
	result[2] = 1.1*sqrt(sumSquare[2]/(256*256));

	return result;
}





